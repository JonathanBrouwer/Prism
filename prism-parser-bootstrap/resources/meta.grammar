rule toplevel:
    grammar(prule_action)

rule grammar(action):
    GrammarFile(rs) <- _n* rs:(prule(action)*)

rule prule(action):
    Rule(name, args, blocks) <- "rule" name:identifier "(" args:@repeat(identifier, ",", *) ")" ":" _n blocks:prule_blocks(action)
    Rule(name, [], blocks) <- "rule" name:identifier ":" _n blocks:prule_blocks(action)
    Rule(name, [], Block("", AnnotatedExpr([], expr) :: []) :: []) <- "rule" name:identifier "=" expr:prule_expr(action) _n

rule prule_blocks(action):
    (Block(n, c) <- "--" (n:identifier / n:"") _n c:prule_constructors(action))+
    Block("", c) :: [] <- c:prule_constructors(action)

rule prule_constructors(action):
    prule_annotated_expr(action)*
rule prule_annotated_expr(action):
    AnnotatedExpr(ans, e) <- ans:(a <- a:prule_annotation _n)* e:prule_expr(action) _n

rule prule_annotation:
    Error(err) <- "@error" "(" err:pstring ")"
    DisableLayout() <- "@disable_layout"
    EnableLayout() <- "@enable_layout"
    DisableRecovery() <- "@disable_recovery"
    EnableRecovery() <- "@enable_recovery"

rule prule_expr(action):
    -- action
    Action(r, a) <- a:action "<-" r:@this
    -- choice
    Choice(es) <- es:@repeat(@next, "/", 2, inf)
    -- sequence
    Sequence(es) <- es:@repeat(@next, layout, 2, inf)
    -- bind
    NameBind(n, e) <- n:identifier ":" e:@next
    -- repeat
    Repeat(r, "0", None(), Sequence([])) <- r:@this "*"
    Repeat(r, "1", None(), Sequence([])) <- r:@this "+"
    Repeat(r, "0", Some("1"), Sequence([])) <- r:@this "?"
    -- base
    Literal(s) <- s:pstring
    CharClass(c) <- "[" c:charclass "]"
    SliceInput(r) <- "@str" "(" r:prule_expr(action) ")"
    PosLookahead(r) <- "@pos" "(" r:prule_expr(action) ")"
    NegLookahead(r) <- "@neg" "(" r:prule_expr(action) ")"
    r <- "(" r:prule_expr(action) ")"
    AtThis() <- "@this"
    AtNext() <- "@next"
    AtAdapt(a, n) <- "@adapt" "(" a:action "," n:identifier ")"
    Rule(n, as) <- n:identifier @neg(layout) "(" as:@repeat(action, ",", *) ")"
    Rule(n, []) <- n:identifier
    Repeat(e, "0", None(), d) <- "@repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," "*" ")"
    Repeat(e, "1", None(), d) <- "@repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," "+" ")"
    Repeat(e, min, None(), d) <- "@repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," min:integer "," "inf" ")"
    Repeat(e, min, Some(max), d) <- "@repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," min:integer "," max:integer ")"

rule charclass:
    CharClass(negate, ps) <- negate:"^"? ps:@repeat(charclass_part, "|", *)

rule charclass_part:
    Range(c1, c2) <- "\'" c1:charclass_char "\'" "-" "\'" c2:charclass_char "\'"
    Range(c, c) <- "\'" c:charclass_char "\'"

rule charclass_char:
    [^ '\'' | '\\' | '\n']
    char_escapes

rule pstring:
    @error("String")
    @disable_layout
    @disable_recovery
    s <- "\"" s:@str(str_char*) "\""

rule str_char:
    [^ '\"' | '\\' | '\n']
    char_escapes

rule char_escapes:
    "\n" <- "\\n"
    "\r" <- "\\r"
    "\\" <- "\\\\"
    "\"" <- "\\\""
    "\'" <- "\\\'"

rule layout = [' ']

rule _n = ['\n']+

rule integer:
    @error("Integer")
    @disable_layout
    @disable_recovery
    n <- n:@str([ '0'-'9' ]+)

rule identifier:
    @error("Identifier")
    @disable_layout
    @disable_recovery
    n <- @neg(reserved @neg(['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ])) n:@str([ 'a'-'z' | 'A'-'Z' | '_' ] ['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*)

rule reserved:
    "end"
    "str"
    "rule"
    "ast"
    "neg"
    "pos"


rule prule_action:
    -- cons
    Cons(h, t) <- h:@next "::" t:@this
    -- base
    Nil() <- "[]"
    Construct(n, as) <- n:identifier "(" as:@repeat(prule_action, ",", *) ")"
    InputLiteral(s) <- s:pstring
    Name(n) <- n:identifier
    a <- "(" a:prule_action ")"
