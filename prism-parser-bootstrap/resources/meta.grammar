rule toplevel = grammar(prule_action);

rule grammar(action) = GrammarFile(rs) <- rs:prule(action)*;

rule prule(action) {
    Rule(name, params, blocks) <- "rule" name:identifier params:prule_params "{" blocks:prule_blocks(action) "}";
    Rule(name, params, Block("", AnnotatedExpr([], expr) :: []) :: []) <- "rule" name:identifier params:prule_params "=" expr:prule_expr(action) ";";
}

rule prule_params {
    params <- "(" params:#repeat(identifier, ",", *) ")";
    [] <- "";
}

rule prule_blocks(action) {
    <Block(n, c) <- "group" n:#str(identifier?) "{" c:prule_constructors(action) "}">+;
    Block("", c) :: [] <- c:prule_constructors(action);
}

rule prule_constructors(action) = prule_annotated_expr(action)*;
rule prule_annotated_expr(action) = AnnotatedExpr(ans, e) <- ans:<a <- a:prule_annotation>* e:prule_expr(action) ";";

rule prule_annotation {
    Error(err) <- "#" "[" "error" "(" err:pstring ")" "]";
    DisableLayout() <- "#" "[" "disable_layout" "]";
    EnableLayout() <- "#" "[" "enable_layout" "]";
    DisableRecovery() <- "#" "[" "disable_recovery" "]";
    EnableRecovery() <- "#" "[" "enable_recovery" "]";
}

rule prule_expr(action) {
    group action {
        Action(r, a) <- a:action(#env) "<-" r:#this;
    }
    group choice {
        Choice(es) <- es:#repeat(#next, "/", 2, inf);
    }
    group sequence {
        Sequence(es) <- es:#repeat(#next, layout, 2, inf);
    }
    group bind {
        NameBind(n, e) <- n:identifier ":" e:#next;
    }
    group repeat {
        Repeat(r, "0", None(), Sequence([])) <- r:#this "*";
        Repeat(r, "1", None(), Sequence([])) <- r:#this "+";
        Repeat(r, "0", Some("1"), Sequence([])) <- r:#this "?";
    }
    group base {
        Literal(s) <- s:pstring;
        CharClass(c) <- "[" c:charclass "]";
        SliceInput(r) <- "#str" "(" r:prule_expr(action) ")";
        PosLookahead(r) <- "#pos" "(" r:prule_expr(action) ")";
        NegLookahead(r) <- "#neg" "(" r:prule_expr(action) ")";
        r <- "<" r:prule_expr(action) ">";
        This() <- "#this";
        Next() <- "#next";
        Guid() <- "#guid";
        AtAdapt(a, n) <- "#adapt" "(" a:action(#env) "," n:identifier ")";
        RunVar(n, as) <- n:identifier #neg(layout) "(" as:#repeat(prule_expr(action), ",", *) ")";
        RunVar(n, []) <- n:identifier;
        Repeat(e, "0", None(), d) <- "#repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," "*" ")";
        Repeat(e, "1", None(), d) <- "#repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," "+" ")";
        Repeat(e, min, None(), d) <- "#repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," min:integer "," "inf" ")";
        Repeat(e, min, Some(max), d) <- "#repeat" "(" e:prule_expr(action) "," d:prule_expr(action) "," min:integer "," max:integer ")";
        Env() <- "#env";
    }
}

rule charclass {
    CharClass(negate, ps) <- negate:"^"? ps:#repeat(charclass_part, "|", *);
}

rule charclass_part {
    Range(c1, c2) <- "\'" c1:charclass_char "\'" "-" "\'" c2:charclass_char "\'";
    Range(c, c) <- "\'" c:charclass_char "\'";
}

rule charclass_char {
    [^ '\'' | '\\' | '\n'];
    char_escapes;
}

rule pstring {
    #[error("String")]
    #[disable_layout]
    #[disable_recovery]
    s <- "\"" s:#str(str_char*) "\"";
}

rule str_char {
    [^ '\"' | '\\' | '\n'];
    char_escapes;
}

rule char_escapes {
    "\n" <- "\\n";
    "\r" <- "\\r";
    "\\" <- "\\\\";
    "\"" <- "\\\"";
    "\'" <- "\\\'";
}

rule layout = [' ' | '\r' | '\n'];

rule integer {
    #[error("Integer")]
    #[disable_layout]
    #[disable_recovery]
    #str([ '0'-'9' ]+);
}

rule identifier {
    #[error("Identifier")]
    #[disable_layout]
    #[disable_recovery]
    n <- #neg(reserved #neg(['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ])) n:#str([ 'a'-'z' | 'A'-'Z' | '_' ] ['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*);
}

rule reserved {
    "end";
    "str";
    "rule";
    "ast";
    "neg";
    "pos";
    "group";
}

rule prule_action(env) {
    group cons {
        Cons(h, t) <- h:#next "::" t:#this;
    }
    group base {
        Nil() <- "[]";
        Construct(n, as) <- n:identifier "(" as:#repeat(prule_action(env), ",", *) ")";
        InputLiteral(s) <- s:pstring;
        Name(n) <- n:identifier;
        a <- "(" a:prule_action(env) ")";
    }
}