ast Term:
    Type()
    Var(name: Input)
    Let(name: Input, arg_type: Term, arg_value: Term, body: Term)
    FunType(name: Input, arg_type: Term, body_type: Term)
    FunConstruct(name: Input, arg_type: Term, body: Term)
    FunDestruct(func: Term, arg: Term)


rule layout -> Input = [' ' | '\n']


rule identifier -> Input:
    @error("Identifier")
    @nolayout
    str([ 'a'-'z' | 'A'-'Z' | '_' ]['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*)


rule term -> Term:
    FunType("_", at, bt) <- at:@next "->" bt:@this
    --
    FunDestruct(f, a) <- f:@this " " a:@next
    --
    Type() <- "Type"
