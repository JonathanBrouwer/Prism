ast Term:
    Type()
    Var(name: Input)
    Let(name: Input, arg_type: Term, arg_value: Term, body: Term)
    FunType(name: Input, arg_type: Term, body_type: Term)
    FunConstruct(name: Input, arg_type: Term, body: Term)
    FunDestruct(func: Term, arg: Term)


rule layout -> Input:
    [' ' | '\n']


rule identifier -> Input:
    @error("Identifier")
    @nolayout
    str([ 'a'-'z' | 'A'-'Z' | '_' ]['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*)


rule term -> Term:
    Let(n, t, v, b) <- "let" n:identifier ":" t:term "=" v:term ";" b:term
    FunConstruct(x, t, r) <- x:identifier ":" t:term "." r:term
    FunType(n, at, bt) <- n:identifier ":" at:term "->" bt:term
    FunType("_", at, bt) <- at:subterm "->" bt:term
    sub <- sub:subterm


rule subterm -> Term:
    FunDestruct(f, a) <- f:subterm " " a:subsubterm
    sub <- sub:subsubterm


rule subsubterm -> Term:
    Type() <- "Type"
    Var(n) <- n:identifier
    t <- "(" t:term ")"
