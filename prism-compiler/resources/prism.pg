rule start = expr($Env::Nil());

rule expr(env) = statement(env);

rule statement(env) {
    b <- "grammar" "{" g:grammar(expr(env)) "}" b:#adapt(g, expr);
    //GrammarDefine(b, guid, "_", g) <- guid:#guid "grammar" "{" g:grammar(wrapped_expr(guid)) "}" b:#adapt(g, expr);
    //GrammarDefine(b, guid, n, g) <- guid:#guid "grammar" n:identifier "{" g:grammar(wrapped_expr(guid)) "}" b:expr;
    //b <- "adapt" n:identifier ";" b:#adapt(n, expr);
    Expr::Let(env, n, v, b) <- "let" n:identifier "=" v:fnconstruct(env) ";" b:statement($Env::Substitute(n, v, env, env));
    Expr::Let(env, n, Expr::TypeAssert(env, v, t), b) <- "let" n:identifier ":" t:fnconstruct(env) "=" v:fnconstruct(env) ";" b:statement($Env::Substitute(n, v, env, env));
    fnconstruct(env);
}

rule fnconstruct(env) {
    fnconstruct_sub(env);
    fntype(env);
}
rule fnconstruct_sub(env) {
    Expr::FnConstruct(env, n, Expr::Let(env, "_", Expr::TypeAssert(env, Expr::Name(env, n), t), r))
        <- "(" n:identifier ":" t:fntype(env) ")" r:fnconstruct_sub($Env::Type("_", Env::Type(n, env)));
    Expr::FnConstruct(env, n, r) <- n:identifier r:fnconstruct_sub($Env::Type(n, env));
    Expr::FnConstruct(env, n, Expr::Let(env, "_", Expr::TypeAssert(env, Expr::Name(env, n), t), r))
        <- "(" n:identifier ":" t:fntype(env) ")" "=>" r:fnconstruct($Env::Type("_", Env::Type(n, env)));
    Expr::FnConstruct(env, n, r) <- n:identifier "=>" r:fnconstruct($Env::Type(n, env));
}

rule fntype(env) {
    Expr::FnType(env, n, at, bt) <- "(" n:identifier ":" at:fntype(env) ")" "->" bt:fntype($Env::Type(n, env));
    Expr::FnType(env, "_", at, bt) <- at:fntype(env) "->" bt:fntype($Env::Type("_", env));
    assert(env);
}
rule assert(env) {
    Expr::TypeAssert(env, e, typ) <- e:fndestruct(env) ":" typ:fndestruct(env);
    fndestruct(env);
}
rule fndestruct(env) {
    Expr::FnDestruct(env, f, a) <- f:fndestruct(env) " " a:base(env);
    base(env);
}

rule base(env) {
    t <- "(" t:expr(env) ")";
    Expr::Type(env) <- "Type";
    Expr::Name(env, n) <- n:identifier;
}

rule layout {
    [' ' | '\n'];
    "//" [^'\n']* "\n";
}

rule keyword {
    "Type";
    "grammar";
}

rule identifier {
    #[error("Identifier")]
    #[disable_layout]
    #[disable_recovery]
    n <- #neg(keyword #neg(['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]))
         n:#str([ 'a'-'z' | 'A'-'Z' | '_' ] ['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*);
}