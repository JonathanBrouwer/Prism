rule wrapped_expr(guid2) = RuleAction::Value(ScopeEnter::ScopeEnter(e, guid3)) <- guid3:guid2 e:expr;

rule expr {
    group statement {
        Expr::GrammarDefine(b, guid, "_", g) <- guid:#guid "grammar" "{" g:grammar(wrapped_expr(guid)) "}" b:#adapt(g, expr);
        Expr::GrammarDefine(b, guid, n, g) <- guid:#guid "grammar" n:identifier "{" g:grammar(wrapped_expr(guid)) "}" b:expr;
        b <- "adapt" n:identifier ";" b:#adapt(n, expr);
        Expr::Let(n, v, b) <- "let" n:identifier "=" v:#next ";" b:#this;
        Expr::Let(n, Expr::TypeAssert(v, t), b) <- "let" n:identifier ":" t:#next "=" v:#next ";" b:#this;
    }
    group fnconstruct {
        fnconstruct(#this, #next);
    }
    group fntype {
        Expr::FnType(n, at, bt) <- "(" n:identifier ":" at:#this ")" "->" bt:#this;
        Expr::FnType("_", at, bt) <- at:#next "->" bt:#this;
    }
    group assert {
        Expr::TypeAssert(e, typ) <- e:#next ":" typ:#next;
    }
    group fndestruct {
        Expr::FnDestruct(f, a) <- f:#this " " a:#next;
    }
    group base {
        t <- "(" t:expr ")";
        Expr::Type() <- "Type";
        Expr::Name(n) <- n:identifier;
    }
}

rule fnconstruct(this, next) {
    Expr::FnConstruct(n, Expr::Let("_", Expr::TypeAssert(Expr::Name(n), t), r)) <- "(" n:identifier ":" t:next ")" r:#this;
    Expr::FnConstruct(n, r) <- n:identifier r:#this;
    Expr::FnConstruct(n, Expr::Let("_", Expr::TypeAssert(Expr::Name(n), t), r)) <- "(" n:identifier ":" t:next ")" "=>" r:this;
    Expr::FnConstruct(n, r) <- n:identifier "=>" r:this;
}

rule layout {
    [' ' | '\n'];
    "//" [^'\n']* "\n";
}

rule keyword {
    "Type";
    "grammar";
}

rule identifier {
    #[error("Identifier")]
    #[disable_layout]
    #[disable_recovery]
    n <- #neg(keyword #neg(['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ])) n:#str([ 'a'-'z' | 'A'-'Z' | '_' ] ['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*);
}