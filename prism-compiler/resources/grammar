rule block {
    ScopeStart(b, guid) <- guid:#guid "grammar" "{" g:grammar(wrapped_expr($guid)) "}" ";" b:#adapt(g, block);
    Let(n, v, b) <- "let" n:identifier "=" v:expr ";" b:block;
    expr;
}

rule wrapped_expr(guid2) = ScopeJump(e, guid2) <- e:expr;

rule expr {
    group fnconstruct {
        FnConstruct(n, t, r) <- "(" n:identifier ":" t:#next ")" "=>" r:#this;
        FnConstruct(n, t, r) <- n:identifier ":" t:#next "=>" r:#this;
    }
    group fntype {
        FnType(n, at, bt) <- "(" n:identifier ":" at:#next ")" "->" bt:#this;
        FnType(n, at, bt) <- n:identifier ":" at:#next "->" bt:#this;
        FnType("_", at, bt) <- at:#next "->" bt:#this;
    }
    group fndestruct {
        FnDestruct(f, a) <- f:#this " " a:#next;
    }
    group base {
        t <- "(" t:block ")";
        Type() <- "Type";
        Variable(n) <- n:identifier;
    }
}

rule layout {
    [' ' | '\n'];
    "//" [^'\n']* "\n";
}

rule identifier {
    #[error("Identifier")]
    #[disable_layout]
    #[disable_recovery]
    n <- n:#str([ 'a'-'z' | 'A'-'Z' | '_' ] ['a'-'z' | 'A'-'Z' | '0'-'9' | '_' ]*);
}